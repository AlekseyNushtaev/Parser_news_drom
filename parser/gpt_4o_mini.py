from openai import OpenAI
from openai.types.chat import ChatCompletion
from typing import List

from config import PROXY_API


def prompt() -> str:
    """
    Формирует системный промпт для генерации новостных статей

    Возвращает:
        str: Многострочный промпт с инструкциями для GPT-4o-mini
    """
    return """
На основе предоставленного текста создай 10 уникальных новостных статью для автомобильных сайтов или порталов. 
Учти:
1. Объём: Сохрани длину исходного текста (±10% символов) для каждой статьи. Проверяй каждый пост на соответствие объёма 
и корректируй, если нужно.
2. Смысловая точность: Передай все ключевые факты (даты, модели, технологии, статистику), но переформулируй их, избегая 
прямого цитирования.
3. Уникальность: Никаких дословных повторов фраз из исходного материала. Используй синонимы, меняй структуру 
предложений, добавляй контекст (например, вместо "выпуск новой модели" → "премьера долгожданного автомобиля").

Тон и структура:
1. Сохрани нейтрально-информативный стиль.

Требования к выводу:
1. У каждого текста должен быть заголовок (не используй разметку в заголовке - просто текстовый заголовок сделай). 
Заголовок отделен от текста новой строкой.
2. Разделитель между статьями - <///>
3. Сохрани длину исходного текста (±10% символов) для каждой статьи.
4. Нигде в тексте не должен упоминаться Дром (это название редакции, которая пишет статьи).
    """


def prompt_title() -> str:
    """
    Формирует системный промпт для рерайтинга заголовков

    Возвращает:
        str: Промпт с инструкциями для генерации заголовков
    """
    return """
На основе предоставленного заголовка создай новый заголовок. 
Учти:
1. Объём: Сохрани длину исходного заголовка (±30% символов).
2. Не используй разметку в заголовке - просто текстовый заголовок сделай.
3. Сохрани нейтрально-информативный стиль.
    """


# Инициализация клиента OpenAI
client: OpenAI = OpenAI(api_key=PROXY_API, base_url="https://api.proxyapi.ru/openai/v1")


def edit_text_ai(text: str) -> str:
    """
    Генерирует рерайтинг текста с помощью GPT-4o-mini

    Параметры:
        text (str): Исходный текст для обработки

    Возвращает:
        str: Результат обработки - 10 новостных статей

    Действия:
        1. Формирует список сообщений (системный промпт + пользовательский текст)
        2. Отправляет запрос к API
        3. Возвращает содержимое ответа
    """
    messages: List[dict] = [
        {"role": "system", "content": prompt()},
        {"role": "user", "content": text}
    ]
    response: ChatCompletion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        stream=False
    )
    return response.choices[0].message.content


def edit_title_ai(title: str) -> str:
    """
    Генерирует рерайтинг заголовка с помощью GPT-4o-mini

    Параметры:
        title (str): Исходный заголовок

    Возвращает:
        str: Новый вариант заголовка

    Действия:
        1. Формирует список сообщений (системный промпт + заголовок)
        2. Отправляет запрос к API
        3. Возвращает содержимое ответа
    """
    messages: List[dict] = [
        {"role": "system", "content": prompt_title()},
        {"role": "user", "content": title}
    ]
    response: ChatCompletion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        stream=False
    )
    return response.choices[0].message.content
