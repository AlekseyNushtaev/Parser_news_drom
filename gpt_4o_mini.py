from openai import OpenAI

from config import PROXY_API

def prompt():
    return """
На основе предоставленного текста создай 10 уникальных новостных статью для автомобильных сайтов или порталов. 
Учти:
1. Объём: Сохрани длину исходного текста (±10% символов) для каждой статьи. Проверяй каждый пост на соответствие объёма и корректируй, если нужно.
2. Смысловая точность: Передай все ключевые факты (даты, модели, технологии, статистику), но переформулируй их, избегая прямого цитирования.
3. Уникальность: Никаких дословных повторов фраз из исходного материала. Используй синонимы, меняй структуру предложений, добавляй контекст (например, вместо "выпуск новой модели" → "премьера долгожданного автомобиля").

Тон и структура:
1. Сохрани нейтрально-информативный стиль.

Требования к выводу:
1. У каждого текста должен быть заголовок (не используй разметку в заголовке - просто текстовый заголовок сделай). Заголовок отделен от текста новой строкой.
2. Разделитель между статьями - <///>
3. Сохрани длину исходного текста (±10% символов) для каждой статьи.
4. Нигде в тексте не должен упоминаться Дром (это название редакции, которая пишет статьи).
    """


def prompt_title():
    return """
На основе предоставленного заголовка создай новый заголовок. 
Учти:
1. Объём: Сохрани длину исходного заголовка (±30% символов).
2. Не используй разметку в заголовке - просто текстовый заголовок сделай.
3. Сохрани нейтрально-информативный стиль.
    """


client = OpenAI(api_key=PROXY_API, base_url="https://api.proxyapi.ru/openai/v1")
def edit_text_ai(text):
    messages = [{"role": "system", "content": prompt()}] + [{"role": "user", "content": text}]
    response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=messages,
                    stream=False
                )
    return response.choices[0].message.content


def edit_title_ai(title):
    messages = [{"role": "system", "content": prompt_title()}] + [{"role": "user", "content": title}]
    response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=messages,
                    stream=False
                )
    return response.choices[0].message.content